import useEffect from '../assets/image/useffect.png';
const UseEffect = {
  image: useEffect,
  title: ['useEffect'],
  principles: [
    'It is used to re-render whole the component, not like useMemo which is used to re-render specific part of componenet',
    'useEffect used by compoenet to doing effect with in compoenets, like on changeing some state some action to do',
  ],
  paragraph: [
    `The useEffect hook in React is used to perform side effects in function components. Side effects are operations that interact with the outside world or have other side effects beyond just rendering such as: Fetching data from an API, Updating the DOM directly, Cleaning up resources and Setting up subscriptions or timers.`,
  ],
  example: ['Let’s break down the example 👨‍💻'],
  code: [
    'Fatch API with useEffect',
    "import React, { useState, useEffect } from 'react';",
    '',
    'const DataFetchingComponent = () => {',
    '  const [data, setData] = useState(null);',
    '  const [loading, setLoading] = useState(true);',
    '  const [error, setError] = useState(null);',
    '',
    '  useEffect(() => {',
    '    const fetchData = async () => {',
    '      try {',
    "        const response = await fetch('https://api.example.com/data');",
    "        if (!response.ok) throw new Error('Network response was not ok');",
    '        const result = await response.json();',
    '        setData(result);',
    '      } catch (error) {',
    '        setError(error);',
    '      } finally {',
    '        setLoading(false);',
    '      }',
    '    };',
    '',
    '    fetchData();',
    '  }, []); // Empty array means this effect runs only once after the initial render',
    '',
    '  if (loading) return <div>Loading...</div>;',
    '  if (error) return <div>Error: {error.message}</div>;',
    '',
    '  return <div>Data: {JSON.stringify(data)}</div>;',
    '};',
    '',
    'export default DataFetchingComponent;',
  ],
};
export default UseEffect;
